let func = fn(a, b: int) -> int {
    mut c: int;
    if 0 < a {
        c = a + b;
    } else {
        c = a - b;
    }
    return c;
};

=========================

ENTRY {
    #1      getparam <0>                  // this just gets codegen'd to a move from CC register (hopefully elided)
    #2      stackalloc <size 8, align 8>  // a
    #3      store #2, #1

    #4      getparam <1>
    #5      stackalloc <size 8, align 8>  // b
    #6      store #4, #3

    #7      stackalloc <size 8, align 8>  // c
    #8      const <type i64, val 0>
    #9      store #7, #8

    #10     load #2   // a
    #11     const <type i64, val 0>
    #12     if #11 < #10 branch BB1 else BB2
}

BB1 {
    #13     load #2
    #14     load #5
    #15     add #13, #14
    #16     store #7, #15
    #17     jump EXIT
}

BB2 {
    #18     load #2
    #19     load #5
    #20     sub #18, #19
    #21     store #7, #20
    #22     jump EXIT
}

EXIT {
    #23     load #7
    #24     setreturn <0> #23
    #25     ret
}

=========================

further analysis can deduce that since the `stackalloc`s are integral and 
only used by load and store instructions, they can be promoted out of stack space.

=========================

ENTRY {
    #1      getparam <0>    // a_1
    #2      getparam <1>    // b_1

    #3      const <type i64, val 0> // c_1 = 0 (this is dead code; it ends up having no uses)

    #4      const <type i64, val 0>
    #5      if #4 < #1 branch BB1 else BB2
}

BB1 {
    #6      add #1, #2
    #7      jump EXIT
}

BB2 {
    #8      sub #1, #2
    #9      jump EXIT
}

EXIT {
    #10     phi #6: BB1, #7: BB2
    #11     setreturn 0, #10
    #12     ret
}